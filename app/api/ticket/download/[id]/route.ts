import { NextRequest } from 'next/server';
import path from 'path';
import fs from 'fs';
import { getServerSession } from 'next-auth';
import { prisma } from '@utils/Prisma';
import PDFDocument from 'pdfkit';
import { Readable } from 'stream';
import { NextResponse } from 'next/server';
import { authOptions } from '@utils/AuthOptions';

export async function GET(req: NextRequest, context: { params: Promise<{ id: string }> }) {
  const session = await getServerSession(authOptions);
  if (!session?.user) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { id } = await context.params;
  const ticketId = parseInt(id, 10);
  if (isNaN(ticketId)) {
    return NextResponse.json({ error: 'Invalid ticket ID' }, { status: 400 });
  }

  try {
    const ticket = await prisma.orderItem.findUniqueOrThrow({
      where: { id: ticketId },
      include: {
        ticketType: {
          include: {
            event: {
              include: {
                venue: true,
              },
            },
          },
        },
        order: {
          include: {
            user: true,
          },
        },
      },
    });

    const doc = new PDFDocument({ margin: 50 });
    const stream = new Readable({ read() {} });
    const price = parseInt(ticket.ticketType.price?.toString() || '0', 10);
    const issueDate = new Date().toLocaleDateString('id-ID');
    const event = ticket.ticketType.event;

    doc.on('data', (chunk) => stream.push(chunk));
    doc.on('end', () => stream.push(null));

    // Load font
    const fontPath = path.resolve(process.cwd(), 'public/fonts/Roboto-Regular.ttf');
    if (fs.existsSync(fontPath)) {
      doc.registerFont('CustomFont', fontPath);
      doc.font('CustomFont');
    } else {
      doc.font('Helvetica');
    }

    // Header Section
    doc
      .rect(0, 0, doc.page.width, 60)
      .fill('#5B21B6');

    doc
      .fillColor('#FFFFFF')
      .fontSize(20)
      .text('CONCERT TICKET INVOICE', 50, 20, { align: 'left' });

    doc
      .moveDown()
      .fontSize(10)
      .text('Generated by accelero.com', { align: 'left' });

    doc.moveDown(2);

    // Invoice Info Box
    doc
      .fontSize(12)
      .fillColor('#000000')
      .text(`Invoice #: INV-${ticket.id.toString().padStart(6, '0')}`)
      .text(`Issued Date: ${issueDate}`)
      .moveDown(1);

    // Draw Section Header
    const drawSectionHeader = (label: string, color: string) => {
      doc
        .fillColor(color)
        .fontSize(14)
        .text(label, { underline: true })
        .moveDown(0.3);
    };

    // Buyer Info
    drawSectionHeader('Buyer Information', '#3B82F6');
    doc
      .fontSize(12)
      .fillColor('#111827')
      .text(`Name : ${ticket.order.user.name}`)
      .text(`Email: ${ticket.order.user.email}`)
      .moveDown(1);

    // Event Info
    drawSectionHeader('Event Details', '#10B981');
    const eventDate = new Date(event.date).toLocaleString('id-ID', {
      weekday: 'long',
      day: '2-digit',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    });

    doc
      .fontSize(12)
      .fillColor('#000000')
      .text(`Title   : ${event.title}`)
      .text(`Venue   : ${event.venue?.name}`)
      .text(`Address : ${event.venue?.address || '-'}`)
      .text(`Date    : ${eventDate}`)
      .moveDown(1);

    // Ticket Info
    drawSectionHeader('Ticket Summary', '#F59E0B');
    doc
      .fontSize(12)
      .fillColor('#000000')
      .text(`Type     : ${ticket.ticketType.name}`)
      .text(`Quantity : ${ticket.quantity}`)
      .text(`Price    : Rp ${price.toLocaleString('id-ID')}`)
      .text(`Total    : Rp ${(price * ticket.quantity).toLocaleString('id-ID')}`)
      .moveDown(1);

    // Terms
    drawSectionHeader('Terms & Conditions', '#EF4444');
    doc
      .fontSize(10)
      .fillColor('#4B5563')
      .text('- Please bring this invoice and your ID to the event check-in desk.')
      .text('- This ticket is non-refundable and non-transferable.')
      .text('- Valid only for the specified date and event.')
      .moveDown(1.5);

    // Footer
    doc
      .fontSize(11)
      .fillColor('#111827')
      .text('Thank you for choosing accelero Entertainment.', { align: 'center' })
      .moveDown(0.3)
      .text('See you at the show! ðŸŽ‰', { align: 'center' });

    doc.end();

    return new NextResponse(stream as any, {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="ticket-${ticketId}.pdf"`,
      },
    });
  } catch (err) {
    console.error('PDF generation error:', err);
    return NextResponse.json({ error: 'Ticket not found or internal error' }, { status: 500 });
  }
}
