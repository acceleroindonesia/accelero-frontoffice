generator client {
  provider = "prisma-client-js"
  output   = "orm"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  name          String?   @map("name")
  email         String    @unique @map("email")
  phoneNumber   String?   @unique @map("phone_number")
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("image")
  password      String?   @map("password")
  role          String    @default("user") @map("role")
  isMember      Boolean   @default(false) @map("is_member")
  agreement     Boolean   @default(false) @map("agreement")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  orders        Order[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int     @map("user_id")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime @map("expires")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @unique @map("token")
  expires    DateTime @map("expires")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Venue {
  id        Int      @id @default(autoincrement())
  name      String   @map("name")
  address   String   @map("address")
  capacity  Int      @map("capacity")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  events    Event[]

  @@map("venues")
}

model Event {
  id           Int          @id @default(autoincrement())
  uuid         String       @unique @default(uuid())
  title        String       @map("title")
  slug         String       @unique @map("slug")
  description  String       @map("description")
  date         DateTime     @map("date")
  venueId      Int          @map("venue_id")
  status       String       @map("status")
  thumbnailUrl String       @map("thumbnail_url")
  isPrivate    Boolean      @default(false) @map("is_private")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @default(now()) @map("updated_at")
  banners      Banner[]
  venue        Venue        @relation(fields: [venueId], references: [id])
  ticketTypes  TicketType[]

  @@map("events")
}

model Banner {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  bannerUrl String   @map("banner_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("banners")
}

model TicketType {
  id          Int         @id @default(autoincrement())
  eventId     Int         @map("event_id")
  name        String      @map("name")
  price       Decimal     @map("price")
  stock       Int         @map("stock")
  information String?     @map("information")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  orderItems  OrderItem[]
  event       Event       @relation(fields: [eventId], references: [id])

  @@map("ticket_types")
}

model Order {
  id         Int         @id @default(autoincrement())
  uuid       String      @unique @default(uuid())
  userId     Int         @map("user_id")
  status     String      @map("status")
  totalPrice Decimal     @map("total_price")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")
  orderItems OrderItem[]
  user       User        @relation(fields: [userId], references: [id])
  payment    Payment?

  @@map("orders")
}

model OrderItem {
  id            Int        @id @default(autoincrement())
  orderId       Int        @map("order_id")
  ticketTypeId  Int        @map("ticket_type_id")
  quantity      Int        @map("quantity")
  unitPrice     Decimal    @map("unit_price")
  subtotalPrice Decimal    @map("subtotal_price")
  order         Order      @relation(fields: [orderId], references: [id])
  ticketType    TicketType @relation(fields: [ticketTypeId], references: [id])

  @@map("order_items")
}

model Payment {
  id         Int       @id @default(autoincrement())
  orderId    Int       @unique @map("order_id")
  method     String    @map("method")
  paymentUrl String    @map("payment_url")
  segment    String?   @map("segment")
  status     String    @map("status")
  paidAt     DateTime? @map("paid_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  order      Order     @relation(fields: [orderId], references: [id])

  @@map("payments")
}
